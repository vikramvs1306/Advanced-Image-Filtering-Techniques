# -*- coding: utf-8 -*-
"""hw1ip.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T6Yk88vNrNbNFIXuPc9a7wHhoN4Lyqss

Answer 1
"""

import cv2
import numpy as np

# Function to apply a filter to an image
def apply_filter(image, kernel):
    filtered = cv2.filter2D(image, -1, kernel)
    return filtered

# Function to normalize the difference between two images
def normalize_difference(image1, image2):
    diff = cv2.absdiff(image1, image2)
    return cv2.normalize(diff, None, 0, 255, cv2.NORM_MINMAX)

# Main function for image processing
def main(filename):
    # Read the input image
    original_image = cv2.imread(filename)

    # Convert to grayscale if it's an RGB image
    if original_image.shape[-1] == 3:
        grayscale_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2GRAY)
    else:
        grayscale_image = original_image

    # Define the filter
    w_filter = np.array([[0, 1/2, 0], [1/2, -1, 1/2], [0, 1/2, 0]])

    # Apply the filter to the grayscale image
    g_image = apply_filter(grayscale_image, w_filter)

    # Apply the filter again to the previously filtered image
    h_image = apply_filter(g_image, w_filter)

    # Compute the difference between the original image and the first filtered image
    s_image = grayscale_image - g_image

    # Compute the difference between the original image and the second filtered image
    r_image = grayscale_image - h_image

    # Normalize the difference images
    g_diff = normalize_difference(grayscale_image, g_image)
    h_diff = normalize_difference(grayscale_image, h_image)
    s_diff = normalize_difference(grayscale_image, s_image)
    r_diff = normalize_difference(grayscale_image, r_image)

    # Save the filtered and difference images
    cv2.imwrite(filename[:-4] + "filter-g.jpg", g_image)
    cv2.imwrite(filename[:-4] + "filter-h.jpg", h_image)
    cv2.imwrite(filename[:-4] + "filter-s.jpg", s_image)
    cv2.imwrite(filename[:-4] + "filter-r.jpg", r_image)

    cv2.imwrite(filename[:-4] + "filter-g-diff.jpg", g_diff)
    cv2.imwrite(filename[:-4] + "filter-h-diff.jpg", h_diff)
    cv2.imwrite(filename[:-4] + "filter-s-diff.jpg", s_diff)
    cv2.imwrite(filename[:-4] + "filter-r-diff.jpg", r_diff)

if __name__ == '__main__':
    filename = "/content/lena_gray.jpg"  # Replace with your input image filename
    main(filename)

"""Answer 2"""

import cv2
import numpy as np

# Function to apply a Laplacian filter to an image
def apply_laplacian_filter(image):
    # Define a 3x3 Laplacian filter kernel
    laplacian_kernel = np.array([[-1, -1, -1],
                                [-1, 8, -1],
                                [-1, -1, -1]], dtype=np.float32)

    # Apply the Laplacian filter to the image
    laplacian_image = cv2.filter2D(image, -1, laplacian_kernel)

    return laplacian_image

# Main function for image processing
def main(filename):
    # Read the input image
    original_image = cv2.imread(filename)

    # Check if the image is in color (3 channels) and convert it to grayscale if needed
    if len(original_image.shape) == 3:
        grayscale_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2GRAY)
    else:
        grayscale_image = original_image

    # Apply the Laplacian filter to the grayscale image
    laplacian_image = apply_laplacian_filter(grayscale_image)

    # Compute the absolute difference between the original and filtered images
    diff = cv2.absdiff(grayscale_image, laplacian_image)

    # Normalize the difference image
    laplacian_norm = cv2.normalize(diff, None, 0, 255, cv2.NORM_MINMAX, cv2.CV_8U)

    # Save the filtered and difference images
    cv2.imwrite(filename[:-4] + "Laplacian.jpg", laplacian_image)  # Save filtered image
    cv2.imwrite(filename[:-4] + "LaplacianDiff.jpg", diff)  # Save difference image

if __name__ == '__main__':
    filename = "/content/lena_gray.jpg"  # Replace with your input image filename
    main(filename)

"""Answer 3"""

import cv2
import numpy as np

# Function to apply unsharp masking to an image
def apply_unsharp_masking(image, sigma):
    # Apply Gaussian blur with the specified standard deviation (σ)
    blurred_image = cv2.GaussianBlur(image, (5, 5), sigma)

    # Calculate the unsharp mask (difference between the original and blurred image)
    unsharp_mask = image - blurred_image

    # Add the unsharp mask back to the original image to enhance details
    sharpened_image = image + unsharp_mask

    return sharpened_image, unsharp_mask

# Function to normalize the difference between two images
def normalize_difference(image1, image2):
    diff = cv2.absdiff(image1, image2)
    return cv2.normalize(diff, None, 0, 255, cv2.NORM_MINMAX)

# Main function for image processing
def main(filename):
    # Read the input image
    original_image = cv2.imread(filename)

    if original_image is not None:
        # Convert to grayscale if it's a color image
        if len(original_image.shape) == 3:
            grayscale_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2GRAY)
        else:
            grayscale_image = original_image

        # Define the standard deviation (σ) for the Gaussian filter
        sigma = 10  # Adjust the value as needed

        # Apply unsharp masking with the specified Gaussian filter
        sharpened_image, unsharp_mask = apply_unsharp_masking(grayscale_image, sigma)

        # Normalize the difference between the original and sharpened images
        diff = normalize_difference(grayscale_image, sharpened_image)

        # Save the sharpened image and the difference (unsharp mask) image
        cv2.imwrite(filename[:-4] + "Unsharp.jpg", sharpened_image)  # Save sharpened image
        cv2.imwrite(filename[:-4] + "UnsharpDiff.jpg", diff)  # Save difference (unsharp mask) image

        print("Images processed and saved successfully.")
    else:
        print("Image not found or could not be loaded.")

if __name__ == '__main__':
    filename = "/content/lena_gray.jpg"  # Replace with your input image filename
    main(filename)

"""Answer 4"""

import cv2
import numpy as np

# Function to apply a 3x3 averaging filter to an image
def apply_averaging_filter(image):
    # Define the 3x3 averaging filter kernel
    averaging_kernel = np.array([[1/9, 1/9, 1/9],
                                 [1/9, 1/9, 1/9],
                                 [1/9, 1/9, 1/9]])

    # Apply the averaging filter
    averaged_image = cv2.filter2D(image, -1, averaging_kernel)

    return averaged_image

# Function to apply a 3x3 Laplacian filter with -4 at the center to an image
def apply_laplacian_filter(image):
    # Define the 3x3 Laplacian filter kernel with -4 at the center
    laplacian_kernel = np.array([[0, 1, 0],
                                 [1, -4, 1],
                                 [0, 1, 0]])

    # Apply the Laplacian filter
    laplacian_image = cv2.filter2D(image, -1, laplacian_kernel)

    return laplacian_image

# Function to normalize the difference between two images
def normalize_difference(image1, image2):
    diff = cv2.absdiff(image1, image2)
    return cv2.normalize(diff, None, 0, 255, cv2.NORM_MINMAX)

# Main function for image processing
def main(filename):
    # Read the input image
    original_image = cv2.imread(filename)

    if original_image is not None:
        # Convert to grayscale if it's a color image
        if len(original_image.shape) == 3:
            grayscale_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2GRAY)
        else:
            grayscale_image = original_image

        # Apply the averaging filter
        averaged_image = apply_averaging_filter(grayscale_image)

        # Apply the Laplacian filter to the averaged image
        avg_laplacian_image = apply_laplacian_filter(averaged_image)

        # Normalize the difference image
        avg_laplacian_diff = normalize_difference(grayscale_image, avg_laplacian_image)

        # Save the filtered and difference images
        cv2.imwrite(filename[:-4] + "AvgLaplace.jpg", avg_laplacian_image)  # Save filtered image
        cv2.imwrite(filename[:-4] + "AvgLaplaceDiff.jpg", avg_laplacian_diff)  # Save difference image

        print("Images processed and saved successfully.")
    else:
        print("Image not found or could not be loaded.")

if __name__ == '__main__':
    filename = "/content/lena_gray.jpg"  # Replace with your input image filename
    main(filename)

